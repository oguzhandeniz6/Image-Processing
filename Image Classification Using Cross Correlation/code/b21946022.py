# -*- coding: utf-8 -*-
"""b21946022.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F1_Bs_ZEBtkAM4i5hRy0HsuBINx5EMbe
"""

import cv2
import os
import numpy as np
from google.colab.patches import cv2_imshow

def readNlist(location):
  # Get all file names in folder, read them as an image
  folder = os.listdir(location)
  folder.sort()

  img_list = []

  for name in folder:
    if name[0] != ".":
      img = cv2.imread(location + name, 0)
      img_list.append(img)

  return img_list


def NCC(img1, img2):
  # Subtract means from intensities
  img1 = img1 - img1.mean()  
  img2 = img2 - img2.mean()
  # Normalize values
  normImg1 = img1 / np.linalg.norm(img1)
  normImg2 = img2 / np.linalg.norm(img2)
  # Calculate NCC
  return np.sum(normImg1 * normImg2) / np.sqrt(np.sum(normImg1**2) * np.sum(normImg2**2))


def find_peak_offset(template, target, idx):
  # Find peak and offset values for one template over one target
  templateRow, templateCol = template.shape
  offset_u, offset_v, peak = 0, 0, 0

  # Slide template over target image
  for r in range(targetRow - templateRow):
    for c in range(targetCol - templateCol):
      # Crop overlapping part from target (sizes must be equal to calculate NCC)
      target_part = target[r : r + templateRow, c : c + templateCol]

      ncc = NCC(target_part, template)  # Calculate Normalized Cross Correlation
      if ncc > peak:
        # Find highest peak NCC value and its offset values
        offset_u, offset_v, peak = r, c, ncc
  
  return offset_u, offset_v, peak


# ------------------------------ MAIN ------------------------------

# Change according to the folder's name which you want to work on
# I run target folders seperately by their corresponding letters
target_name = "A"

# Template folder location
template_folder_location = "/content/sample_data/template/"
target_folder_location = "/content/sample_data/" + target_name + "/"

# Real index of currently executed letter
real_index = ord(target_name) - ord("A")  # target_name must be a char

# Get all target and template images in lists
template_list = readNlist(template_folder_location)
target_list = readNlist(target_folder_location)


all_results = []
true_classification = 0  # number of correct classifications

# Loop through every target image in target_list
for target in target_list:

  targetRow, targetCol = target.shape
  sub_results = []
  result_offset_u, result_offset_v, result_peak, result_index = 0, 0, 0, 0
  idx = 0

  # Loop through every template image in template_list for target image classification
  for template in template_list:
    # Calculate peak and offset values with function
    offset_u, offset_v, peak = find_peak_offset(template, target, idx)

    if peak > result_peak:
      # Find highest peak NCC value and its offset values through all template images
      result_offset_u, result_offset_v, result_peak, result_index = offset_u, offset_v, peak, idx
    
    sub_results.append(peak)
    idx += 1

  # Add target-template match to all_results list
  all_results.append((result_offset_u, result_offset_v, result_peak, result_index))  

  print("offset:", result_offset_u, result_offset_v, "peak:",
        result_peak, "classified letter:", chr(result_index + ord("A")))
  
  # Google Colab cv2.imshow() method
  cv2_imshow(target)
  cv2_imshow(template_list[result_index])

  print("----------------------------------")

  # If classification is correct (target index == found template index)
  if result_index == real_index:
    true_classification += 1

# Calculate accuracy. Since there is no True Negative, accuracy = True Positive / All
# (All target images are same letter. So if correct, it's True Positive; if wrong, it's False Positive) 
accuracy = (true_classification / len(target_list)) * 100
print(str(true_classification) + " / " + str(len(target_list)))

print("Accuracy of target images " + chr(ord("A") + real_index) + " is: %" + str(accuracy))